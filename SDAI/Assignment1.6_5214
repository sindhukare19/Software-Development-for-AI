{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7ff7f0a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n",
      "[1]\n",
      "[2]\n",
      "[1, 2]\n",
      "[3]\n",
      "[1, 3]\n",
      "[2, 3]\n",
      "[1, 2, 3]\n",
      "[4]\n",
      "[1, 4]\n",
      "[2, 4]\n",
      "[1, 2, 4]\n",
      "[3, 4]\n",
      "[1, 3, 4]\n",
      "[2, 3, 4]\n",
      "[1, 2, 3, 4]\n",
      "[5]\n",
      "[1, 5]\n",
      "[2, 5]\n",
      "[1, 2, 5]\n",
      "[3, 5]\n",
      "[1, 3, 5]\n",
      "[2, 3, 5]\n",
      "[1, 2, 3, 5]\n",
      "[4, 5]\n",
      "[1, 4, 5]\n",
      "[2, 4, 5]\n",
      "[1, 2, 4, 5]\n",
      "[3, 4, 5]\n",
      "[1, 3, 4, 5]\n",
      "[2, 3, 4, 5]\n",
      "[1, 2, 3, 4, 5]\n"
     ]
    }
   ],
   "source": [
    "def subset(Xs):\n",
    "    if not Xs:\n",
    "        return [[]]\n",
    "    else:\n",
    "        X = Xs[0]\n",
    "        Ys = Xs[1:]\n",
    "        result = []\n",
    "        for Zs in subset(Ys):\n",
    "            result.append(Zs)\n",
    "            result.append([X] + Zs)\n",
    "        return result\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    Xs = [1, 2, 3, 4, 5]\n",
    "    subsets = subset(Xs)\n",
    "    for s in subsets:\n",
    "        print(s)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa388773",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
